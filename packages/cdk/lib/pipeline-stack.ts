import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import {
  CodePipeline,
  CodePipelineSource,
  CodeBuildStep,
  ManualApprovalStep,
} from 'aws-cdk-lib/pipelines';
import { ApplicationStage } from './applications/application-stage';
import { ApexDomainStage } from './apex-domain-stage';
import { ApplicationAccountType } from './application-account';

export interface CodeSourceProps {
  owner: string;
  repo: string;
  branch: string;
}

export interface SubDomainEnvs {
  subDomain: string;
  applicationAccountType: ApplicationAccountType;
  env: {
    region: string;
    account: string;
  };
}

export interface PipelineStackProps extends cdk.StackProps {
  codeSource: CodeSourceProps;
  codeStarConnectionArn: string;
  prodEnv: {
    apexDomain: string;
    applicationAccountType: ApplicationAccountType;
    apexPublicHostedZoneId: string;
    region: string;
    account: string;
  };
  subDomainEnvs: SubDomainEnvs[];
}

export class PipelineStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props: PipelineStackProps) {
    super(scope, id, props);

    const { owner, repo, branch } = props.codeSource;
    const { codeStarConnectionArn, prodEnv, subDomainEnvs } = props;

    const codeSourceConnection = CodePipelineSource.connection(owner + '/' + repo, branch, {
      // if connectionArn is wrong at initial setup, the autogenerated IAM role used to execute will have wrong or bad permissions, 
      // To solve the problem pipeline must be deleted and recreated
      connectionArn: codeStarConnectionArn
    });

    const synthPipelineCode = new CodeBuildStep('SynthPipelineCode', {
      input: codeSourceConnection,
      installCommands: [
        'npm install -g aws-cdk',
      ],
      commands: [
        // Build Web
        'cd packages/frontend',
        'npm ci',
        'npm run build',
        // Build Rest API
        'cd ../../packages/backend',
        'npm ci',
        'npm run build',
        // Build CDK & synth
        'cd ../../packages/cdk',
        'npm ci',
        'npm run build',
        'cdk synth', // npx cdk synth doesnt seem to work as of 2023-09-19 using latest aws-cdk version ^2.96.1
      ],
      primaryOutputDirectory: 'packages/cdk/cdk.out',
    });

    const cdkPipeline = new CodePipeline(this, 'Pipeline', {
      selfMutation: true,
      pipelineName: 'Pipeline',
      crossAccountKeys: true,
      synth: synthPipelineCode,
      publishAssetsInParallel: false,
    });

    cdkPipeline.addStage(new ApexDomainStage(this, 'ApexDomainStage', {
      env: { account: prodEnv.account, region: prodEnv.region },
      apexPublicHostedZoneId: prodEnv.apexPublicHostedZoneId,
      subDomainEnvs
    }));

    subDomainEnvs.forEach(subDomainEnv => {
      if (subDomainEnv.applicationAccountType === ApplicationAccountType.PROD) {
        throw new Error('Subdomain cannot be of type PROD');
      }
      const stage = new ApplicationStage(this, `${subDomainEnv.subDomain}-AppStage`, {
        env: subDomainEnv.env,
        subDomain: subDomainEnv.subDomain,
        apexDomain: prodEnv.apexDomain,
        apexPublicHostedZoneId: prodEnv.apexPublicHostedZoneId,
        prodAccount: prodEnv.account,
        applicationAccountType: subDomainEnv.applicationAccountType,
      });
      cdkPipeline.addStage(stage);
    });

    const prodStage = new ApplicationStage(this, 'Prod-AppStage', {
      env: prodEnv,
      apexDomain: prodEnv.apexDomain,
      apexPublicHostedZoneId: prodEnv.apexPublicHostedZoneId,
      applicationAccountType: prodEnv.applicationAccountType,
    });

    if (subDomainEnvs.length > 0) {
      cdkPipeline.addStage(prodStage, {
        pre: [ new ManualApprovalStep('PromoteToProd')],
      });
    } else {
      cdkPipeline.addStage(prodStage);
    }
  }
}